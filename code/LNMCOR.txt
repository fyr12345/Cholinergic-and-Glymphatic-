import os
import numpy as np
import pandas as pd
import nibabel as nib
from scipy.stats import t
from statsmodels.stats.multitest import multipletests
import nibabel.processing

# 定义数据路径和参数
nii_folder = r'G:\llb\1\roifc_ttest_results'
excel_file = r'D:\Users\fyr\Desktop\llbwl\124haohou\合并后严格筛选.xlsx'
file_column = 'number'      # 根据实际情况修改
y_column = 'alps'      # 主要特征Y的列名
covariate_columns = ['体素数量','年龄','性别']  # 混杂因素的列名列表

# 定义掩膜文件路径
mask_file = r'G:\llb\2_Resliced\Resliced_basefor.nii'  # 请将此路径修改为实际的掩膜文件路径

# 读取Excel文件并处理缺失值
df = pd.read_excel(excel_file)

# 删除主要特征Y或混杂因素中包含缺失值的行
df_clean = df.dropna(subset=[file_column, y_column] + covariate_columns).reset_index(drop=True)

# 提取Excel文件中所有的文件名
excel_file_names = df_clean[file_column].astype(str).tolist()

# 初始化列表
x_data_list = []
valid_file_names = []

# 获取目标形状和仿射矩阵（例如，使用第一个存在的nii文件）
for file_name in excel_file_names:
    nii_file_path = os.path.join(nii_folder, file_name + '.nii')
    if os.path.exists(nii_file_path):
        sample_file_name = file_name
        sample_nii_path = nii_file_path
        break
else:
    print("错误：在nii文件夹中找不到任何与Excel文件匹配的nii文件。")
    exit()

sample_img = nib.load(sample_nii_path)
target_shape = sample_img.shape
target_affine = sample_img.affine

# 读取掩膜文件
if not os.path.exists(mask_file):
    print(f"错误：掩膜文件 {mask_file} 不存在。")
    exit()

mask_img = nib.load(mask_file)
mask_data = mask_img.get_fdata()

# 检查掩膜的形状是否与目标形状一致
if mask_data.shape != target_shape:
    print(f"错误：掩膜的形状 {mask_data.shape} 与目标形状 {target_shape} 不一致。")
    exit()

# 确保掩膜为二值化（0和1）
mask_data = (mask_data > 0).astype(int)

# 读取nii文件并提取体素数据
for index, row in df_clean.iterrows():
    file_name = str(row[file_column])
    nii_file_path = os.path.join(nii_folder, file_name + '.nii')

    if not os.path.exists(nii_file_path):
        print(f"警告：{nii_file_path} 不存在，跳过该文件。")
        continue

    # 读取nii文件
    img = nib.load(nii_file_path)
    data = img.get_fdata()

    # 检查图像形状是否与目标形状一致
    if data.shape != target_shape:
        print(f"警告：{file_name} 的形状 {data.shape} 与目标形状 {target_shape} 不一致，进行重采样。")
        # 重采样
        img = nib.processing.resample_from_to(img, (target_shape, target_affine))
        data = img.get_fdata()

    x_data = data.flatten()
    x_data_list.append(x_data)
    valid_file_names.append(file_name)

# 检查是否有有效的数据
if not x_data_list:
    print("没有有效的nii文件可用于计算。")
    exit()

# 将体素数据转换为二维数组
voxel_data = np.array(x_data_list)  # 形状：(n_samples, n_voxels)

# 更新DataFrame，确保样本顺序与voxel_data一致
df_valid = df_clean[df_clean[file_column].astype(str).isin(valid_file_names)].reset_index(drop=True)

# 构建设计矩阵
Y_main = df_valid[y_column].values  # 形状：(n_samples,)
covariates = df_valid[covariate_columns].values  # 形状：(n_samples, n_covariates)
intercept = np.ones((len(Y_main), 1))  # 形状：(n_samples, 1)
X = np.hstack((intercept, Y_main.reshape(-1, 1), covariates))  # 形状：(n_samples, n_regressors)

# 获取样本数和体素数
n_samples, n_voxels = voxel_data.shape
n_regressors = X.shape[1]

# 计算(X'X)的逆
XtX_inv = np.linalg.inv(np.dot(X.T, X))  # 形状：(n_regressors, n_regressors)

# 计算(X'X)^{-1}X'
XtX_inv_Xt = np.dot(XtX_inv, X.T)  # 形状：(n_regressors, n_samples)

# 计算beta_all
beta_all = np.dot(XtX_inv_Xt, voxel_data)  # 形状：(n_regressors, n_voxels)

# 计算预测值
Y_hat = np.dot(X, beta_all)  # 形状：(n_samples, n_voxels)

# 计算残差
residuals = voxel_data - Y_hat  # 形状：(n_samples, n_voxels)

# 计算残差方差
sigma2 = np.sum(residuals ** 2, axis=0) / (n_samples - n_regressors)  # 形状：(n_voxels,)

# 计算标准误
se_all = np.sqrt(np.outer(np.diag(XtX_inv), sigma2))  # 形状：(n_regressors, n_voxels)

# 提取主要特征 Y 的回归系数和标准误
beta_y = beta_all[1, :]  # 形状：(n_voxels,)
se_y = se_all[1, :]      # 形状：(n_voxels,)

# 计算 T 值
t_values = np.zeros(n_voxels)
valid_indices = se_y != 0
t_values[valid_indices] = beta_y[valid_indices] / se_y[valid_indices]

# 将 T 值重构为 3D 图像
t_map_3d = t_values.reshape(target_shape)

# -------------------- 以下应用掩膜并进行多重比较矫正 --------------------

# 将T值和掩膜扁平化
t_values_flat = t_values
mask_flat = mask_data.flatten()

# 选择掩膜内的T值
masked_t = t_values_flat[mask_flat == 1]

# 计算自由度
df_deg = n_samples - n_regressors

# 计算双尾p值
p_values = 2 * (1 - t.cdf(np.abs(masked_t), df=df_deg))

# 执行多重比较矫正（例如FDR）
# 你可以根据需要选择不同的方法，如 'bonferroni', 'fdr_bh', 'fdr_bonferroni' 等
reject, pvals_corrected, _, _ = multipletests(p_values, method='bonferroni')

# 创建一个空的p值数组
p_corrected = np.ones(n_voxels)  # 默认所有p值为1

# 将矫正后的p值放回对应的位置
p_corrected[mask_flat > 0] = pvals_corrected

# 创建一个显著性掩膜（例如，p < 0.05）
significant_mask = np.zeros(n_voxels)
significant_mask[mask_flat > 0] = reject

# 将显著性掩膜重构为3D图像
significant_mask_3d = significant_mask.reshape(target_shape)

# 保存矫正后的p值图像
p_corrected_3d = p_corrected.reshape(target_shape)
p_corrected_img = nib.Nifti1Image(p_corrected_3d, target_affine)
output_p_corrected_nii_path = r'D:\Users\fyr\Desktop\llbwl\124haohou\P_corrected_map_alps_bf.nii'
nib.save(p_corrected_img, output_p_corrected_nii_path)
print(f"多重比较矫正后的p值图像已保存为 {output_p_corrected_nii_path}")

# 保存显著性掩膜图像
significant_mask_img = nib.Nifti1Image(significant_mask_3d, target_affine)
output_significant_mask_path = r'D:\Users\fyr\Desktop\llbwl\124haohou\Significant_mask_alps_bf.nii'
nib.save(significant_mask_img, output_significant_mask_path)
print(f"显著性掩膜图像已保存为 {output_significant_mask_path}")

# -------------------- 多重比较矫正部分结束 --------------------

# 创建新的 nii 图像并保存原始T值
t_img = nib.Nifti1Image(t_map_3d, target_affine)
output_nii_path = r'D:\Users\fyr\Desktop\llbwl\124haohou\T_value_map_alps_bf.nii'
nib.save(t_img, output_nii_path)
print(f"T 值图像已保存为 {output_nii_path}")
